
    <style>
        body {
            background-color: #f4f7f9;
        }
        h2 {
            color: #333;
        }
        .table {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .table th, .table td {
            vertical-align: middle;
        }
        .btn {
            border-radius: 30px;
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }
        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }
        .btn-add {
            float: right;
            border-radius: 30px;
        }
        .modal-header {
            background-color: #007bff;
            color: white;
        }
        .modal-footer .btn {
            border-radius: 30px;
        }
        .status-active {
            color: green;
            font-weight: bold;
        }
        .status-expired {
            color: red;
            font-weight: bold;
        }
        .pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

.pagination a {
    color: #88c8bc;
    text-decoration: none;
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    transition: background-color 0.3s, color 0.3s;
}

.pagination a.active {
    background-color: #88c8bc;
    color: #fff;
    
}

.pagination a:hover {
    background-color: #ddd;
}
    </style>
</head>
<body>
    <div class="container mt-5">
        <button class="btn btn-success btn-add mb-3" data-toggle="modal" data-target="#addCouponModal" style="    background-color: #88c8bc;
    border: none;">Add Coupon</button>
        
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Coupon Code</th>
                    <th>Discount(%)</th>
                    <th>Start</th>
                    <th>Expiry</th>
                    <th>Minimum Purchase</th>
                    <th>MaxCoupon Amount</th>
                    <th>Description</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% coupons.forEach(function(coupon) { %>
                <tr>
                    <td><%= coupon.coupon_code %></td>
                    <td><%= coupon.discount %>%</td>
                    <td><%= new Date(coupon.start_date).toLocaleDateString() %></td>
                    <td><%= new Date(coupon.expiry_date).toLocaleDateString() %></td>
                    <td><%= coupon.min_pur_amount.toFixed(2) %></td>
                    <td><%= coupon.max_coupon_amount.toFixed(2) %></td>
                    <td><%= coupon.description %></td>
                    <td class="<%= new Date(coupon.expiry_date) > new Date() ? 'status-active' : 'status-expired' %>">
                        <%= new Date(coupon.expiry_date) > new Date() ? 'Active' : 'Expired' %>
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#editCouponModal<%= coupon._id %>">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteCoupon('<%= coupon._id %>')">Delete</button>
                    </td>
                </tr>
                
                <div class="modal fade" id="editCouponModal<%= coupon._id %>" tabindex="-1" aria-labelledby="editCouponModalLabel<%= coupon._id %>" aria-hidden="true">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="editCouponModalLabel<%= coupon._id %>">Edit Coupon</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body">
                        <form  onsubmit="EditCoupon(event)">
                            <input type="hidden" id="editCouponId" value="<%= coupon._id %>" />
                          <div class="form-group">
                            <label for="editCouponCode">Coupon Code</label>
                            <input type="text" class="form-control" id="editCouponCode" name="coupon_code" value="<%= coupon.coupon_code %>" required>
                          </div>
                          <div class="form-group">
                            <label for="editDiscountPercentage">Discount(%)</label>
                            <input type="text" class="form-control" id="editDiscountPercentage" name="discount" value="<%= coupon.discount %>" required>
                          </div>
                          <div class="form-group">
                            <label for="editStartDate">Start Date</label>
                            <input type="date" class="form-control" id="editStartDate" name="start_date" value="<%= coupon.start_date.toISOString().split('T')[0] %>" required>
                          </div>
                          <div class="form-group">
                            <label for="editExpiryDate">Expiry Date</label>
                            <input type="date" class="form-control" id="editExpiryDate" name="expiry_date" value="<%= coupon.expiry_date.toISOString().split('T')[0] %>" required>
                          </div>
                          <div class="form-group">
                            <label for="editMinPurchasePrice">MinimumPurchase</label>
                            <input type="number" class="form-control" id="editMinPurchasePrice" name="min_pur_amount" value="<%= coupon.min_pur_amount %>" required>
                          </div>
                          <div class="form-group">
                            <label for="offerEndDate">Maximum coupon Amount:</label>
                            <input type="number" class="form-control" id="maxAmount" name="max_coupon_amount" value="<%= coupon.max_coupon_amount %>" required>
                          </div>
                          <div class="form-group">
                            <label for="editCouponDescription">Description</label>
                            <textarea class="form-control" id="editCouponDescription" name="description" rows="3" required><%= coupon.description %></textarea>
                          </div>
                          <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save changes</button>
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>
                <% }) %>
            </tbody>
        </table>
    </div>
    <div class="pagination mt-4">
      <% for (let i = 1; i <= totalPages; i++) { %>
        <a href="/admin/promocodes?page=<%= i %>" class="pagination-link <%= i === currentPage ? 'active' : '' %>">
          <%= i %>
        </a>
      <% } %>
    </div>
    <div class="modal fade" id="addCouponModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addCouponModalLabel">Add New Offer</h5>
            </div>
            <div class="modal-body">
              <form id="addCouponForm">
                <div class="form-group">
                  <label for="couponCode">Coupon code</label>
                  <input type="text" class="form-control" id="couponCode" name="couponCode" required>
                </div>
                <div class="form-group">
                  <label for="discount">Discount</label>
                  <input type="number" class="form-control" id="discount" name="discount" required>
                </div>
                <div class="form-group">
                  <label for="startDate">Start Date</label>
                  <input type="date" class="form-control" id="startDate" name="startDate" required>
                </div>
                <div class="form-group">
                  <label for="endDate">End Date</label>
                  <input type="date" class="form-control" id="endDate" name="endDate" required>
                </div>
                <div class="form-group">
                  <label for="minAmount">Minimum Amount</label>
                  <input type="number" class="form-control" id="minAmount" name="minAmount" required>
                </div>
                <div class="form-group">
                  <label for="maxAmount">Maximum Coupon Amount</label>
                  <input type="number" class="form-control" id="maxAmount" name="maxAmount" required>
                </div>
                <div class="form-group">
                  <label for="description">Description</label>
                  <input type="text" class="form-control" id="description" name="description" required>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                  <button type="button" class="btn btn-outline-primary" onclick="AddCoupon()">Add Coupon</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
   <script>
    async function AddCoupon() {
  const Toast = Swal.mixin({
    toast: true,
    position: "top-end",
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.onmouseenter = Swal.stopTimer
      toast.onmouseleave = Swal.resumeTimer
    }
  })

  const couponCode = document.getElementById('couponCode').value.trim()
  const discount = parseInt(document.getElementById('discount').value.trim())
  const startDate = new Date(document.getElementById('startDate').value)
  const endDate = new Date(document.getElementById('endDate').value)
  const minAmount = parseInt(document.getElementById('minAmount').value.trim())
  const maxAmount = parseInt(document.getElementById('maxAmount').value.trim())
  const couponDescription = document.getElementById('description').value.trim()

  const currentDate = new Date()

  if (!couponCode) return Toast.fire({ icon: "error", title: "Coupon code is empty" })
  if (isNaN(discount) || discount < 1 || discount > 100) {
    return Toast.fire({
      icon: "error",
      title: "Invalid Discount",
      text: "Discount must be a number between 1 and 100."
    })
  }
  // if (!startDate || startDate < currentDate) {
  //   return Toast.fire({
  //     icon: "error",
  //     title: "Invalid Start Date",
  //     text: "Start date cannot be in the past."
  //   })
  // }
  if (!endDate || endDate <= startDate) {
    return Toast.fire({
      icon: "error",
      title: "Invalid End Date",
      text: "End date must be after the start date."
    })
  }
  if (isNaN(minAmount) || minAmount <= 0) {
    return Toast.fire({
      icon: "error",
      title: "Invalid Minimum Amount",
      text: "Minimum amount must be a positive number."
    })
  }
  if (isNaN(maxAmount) || maxAmount <= 0) {
    return Toast.fire({
      icon: "error",
      title: "Invalid Maximum Amount",
      text: "Maximum amount must be a positive number."
    })
  }
  if (!couponDescription) return Toast.fire({ icon: "error", title: "Description is empty" })

  try {
    const response = await fetch('/admin/addCoupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode, discount, startDate, endDate, minAmount, maxAmount, couponDescription })
    })

    const result = await response.json()
    if (result.success) {
      Swal.fire({
        icon: 'success',
        title: 'Coupon Added',
        text: result.message,
        confirmButtonText: 'OK'
      }).then(() => {
        window.location.reload()
      })
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error Occurred',
        text: result.error,
        confirmButtonText: 'OK'
      })
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Network Error',
      text: 'An error occurred. Please check your network connection.',
      confirmButtonText: 'OK'
    })
  }
}


async function EditCoupon(event) {
    event.preventDefault() 

    const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
        }
    })

    const couponId = document.getElementById('editCouponId').value.trim()
    const couponCode = document.getElementById('editCouponCode').value.trim()
    const discount = parseInt(document.getElementById('editDiscountPercentage').value.trim())  
    const startDate = document.getElementById('editStartDate').value.trim()
    const endDate = document.getElementById('editExpiryDate').value.trim()
    const minAmount = document.getElementById('editMinPurchasePrice').value.trim()
    const maxAmount = document.getElementById('maxAmount').value.trim()
    const couponDescription = document.getElementById('editCouponDescription').value.trim()

    if (!couponCode) {
        Toast.fire({ icon: "error", title: "Coupon code is empty" })
        return
    }

    if (isNaN(discount) || discount < 1 || discount > 100 || discount !== Math.floor(discount)) {
        Toast.fire({
            icon: "error",
            title: "Invalid Discount",
            text: "Enter a whole number between 1 and 100."
        })
        return
    }

    if (new Date(startDate) < new Date()) {
        Toast.fire({ icon: "error", title: "Start date cannot be in the past" })
        return
    }

    if (new Date(endDate) <= new Date(startDate)) {
        Toast.fire({ icon: "error", title: "End date must be after the start date" })
        return
    }

    if (isNaN(minAmount) || parseInt(minAmount) <= 0 || isNaN(maxAmount) || parseInt(maxAmount) <= 0) {
        Toast.fire({ icon: "error", title: "Invalid Amounts" })
        return
    }

    try {
        const response = await fetch(`/admin/editCoupon/${couponId}`, {  
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                couponCode,
                discount,
                startDate,
                endDate,
                minAmount,
                maxAmount,
                couponDescription
            })
        })

        const result = await response.json()
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Coupon Edited',
                text: result.message,
                confirmButtonText: 'OK'
            }).then(() => window.location.reload())
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error Occurred',
                text: result.error,
                confirmButtonText: 'OK'
            })
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'An error occurred. Please check your network connection.',
            confirmButtonText: 'OK'
        })
    }
}


const deleteCoupon = async (couponId) => {
  try {
    const response = await fetch('/admin/deleteCoupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ couponId })
    })
    
    const result = await response.json()
    
    if (result.success) {
      Swal.fire({
        icon: 'success',
        title: 'Coupon Deleted',
        text: result.message,
        confirmButtonText: 'OK'
      }).then(() => {
        window.location.reload()
      })
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error Occurred',
        text: result.error,
        confirmButtonText: 'OK'
      })
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Network Error',
      text: 'An error occurred. Please check your network connection.',
      confirmButtonText: 'OK'
    })
  }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>