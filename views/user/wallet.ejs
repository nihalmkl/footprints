<div>
    <h4>Wallet</h4>
    <div class="wallet-card">
      <div>
        <h4>Balance: ₹<%= wallet ? wallet.balance : '0' %></h4>
      </div>
      <div class="wallet-icon">
        <i class="fas fa-wallet"></i>
      </div>
    </div>
    <button class="credit-card-button"  type="button" data-toggle="modal"
    data-target="#addFundsModal">
      <i class="fas fa-credit-card credit-card-icon"></i> Add Money
    </button>
  </div>
  
  <div class="row justify-content-center mt-5">
    <div class="col-md-8">
      <h4 class="text-center mb-4">Transaction History</h4>
      <div class="transaction-list">
        <% if (wallet && wallet.wallet_history.length > 0) { %>
          <% wallet.wallet_history.forEach(transaction => { %>
            <div class="transaction-item">
              <% if (transaction.transaction_type === 'credited') { %>
                <span>
                  <i class="bi bi-arrow-down-circle-fill text-success icon"></i>
                  <%= transaction.description %>
                </span>
                <span class="text-success">+₹<%= transaction.amount %></span>
              <% } else { %>
                <span>
                  <i class="bi bi-arrow-up-circle-fill text-danger icon"></i>
                  <%= transaction.description %>
                </span>
                <span class="text-danger">-₹<%= transaction.amount %></span>
              <% } %>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-center text-muted">
            <p>No transactions found.</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
  <div class="modal fade" id="addFundsModal" tabindex="-1" aria-labelledby="addFundsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addFundsModalLabel">Add Funds to Wallet</h5>

        </div>
        <div class="modal-body">
          <form id="addFundsForm">
            <div class="mb-3">
              <label for="amount" class="form-label">Amount (₹)</label>
              <input type="number" class="form-control" id="amount" required placeholder="Enter amount">
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="confirmAddFundsBtn" onclick="AddFund()">Add Funds</button>
        </div>
      </div>
    </div>
  </div>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    async function AddFund() {

      const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });

      const amount = document.getElementById('amount').value;

      if (!amount) {
        Toast.fire({
          icon: "error",
          title: "amount is empty"
        });
        return
      }
      if (isNaN(amount)) {
        Toast.fire({
          icon: "error",
          title: "Invalid amount. Please enter a number."
        });
        return;
      }
      if (parseFloat(amount) <= 0) {
        Toast.fire({
          icon: "error",
          title: "Amount must be greater than zero."
        });
        return;
      }
      const maxAmount = 100000;
      if (parseFloat(amount) > maxAmount) {
        Toast.fire({
          icon: "error",
          title: `Amount cannot exceed ${maxAmount}.`
        });
        return;
      }


      try {
        const response = await fetch('/wallet/addFund', {
          headers: {
            "Content-Type": "application/json"
          },
          method: 'POST',
          body: JSON.stringify({ amount })
        });
        if (response.ok) {
          const result = await response.json()
          console.log(result)
          

          const options = {
            key: 'rzp_test_MoQOrZAlepfiB7',
            amount: result.amount,
            currency: result.currency,
            name: 'Your wallet',
            order_id: result.id,
            description: "Adding fund to wallet",
            handler: async function (response) {
              try {
              

                
                const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;
                
                const responce = await fetch('/wallet/verifyPayment', {
                  method: "POST",
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ razorpay_order_id, razorpay_payment_id, razorpay_signature, amount: result.amount })
                })


                const data = await responce.json();

                if (data.success) {
                  Swal.fire("Success", "Funds added successfully!", "success").then(() => {
                    location.reload();  
                  });
                } else {
                  Swal.fire("Error", "Payment verification failed. Please try again.", "error");
                }


              } catch (error) {
                console.error('Error verifying payment:', error);
                swal("Error", "An error occurred while verifying the payment. Please try again.", "error");
              }

            },


            prefill: {
              name: 'mohdnihal',
              email: 'mohdnihalmkl@gmail.com',
              contact: '8921590046'
            },
            theme: {
              color: '#000000'
            }
          }

          const razorpay = new Razorpay(options);
          razorpay.open();


        } else {
          Swal.fire({
            icon: 'error',
            title: 'failed to create order',
          })

        }

      } catch (error) {
        console.error('Error adding funds:', error);
        swal("Error", "An error occurred while adding funds. Please try again.", "error");
      }
    }
  </script>